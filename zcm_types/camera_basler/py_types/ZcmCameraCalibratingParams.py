"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ZcmCameraCalibratingParams(object):
    __slots__ = ["cam_mtx", "distCoeff", "rvec", "tvec"]

    def __init__(self):
        self.cam_mtx = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(3) ]
        self.distCoeff = [ 0.0 for dim0 in range(5) ]
        self.rvec = [ 0.0 for dim0 in range(3) ]
        self.tvec = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmCameraCalibratingParams._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        for i0 in range(3):
            buf.write(struct.pack('>3f', *self.cam_mtx[i0][:3]))
        buf.write(struct.pack('>5f', *self.distCoeff[:5]))
        buf.write(struct.pack('>3f', *self.rvec[:3]))
        buf.write(struct.pack('>3f', *self.tvec[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmCameraCalibratingParams._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmCameraCalibratingParams._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmCameraCalibratingParams()
        self.cam_mtx = []
        for i0 in range(3):
            self.cam_mtx.append(struct.unpack('>3f', buf.read(12)))
        self.distCoeff = struct.unpack('>5f', buf.read(20))
        self.rvec = struct.unpack('>3f', buf.read(12))
        self.tvec = struct.unpack('>3f', buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmCameraCalibratingParams in parents: return 0
        tmphash = (0x836bbce6a8fe3246) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmCameraCalibratingParams._packed_fingerprint is None:
            ZcmCameraCalibratingParams._packed_fingerprint = struct.pack(">Q", ZcmCameraCalibratingParams._get_hash_recursive([]))
        return ZcmCameraCalibratingParams._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)


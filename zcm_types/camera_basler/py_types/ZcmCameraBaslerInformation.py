"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmCameraCalibratingParams import ZcmCameraCalibratingParams

class ZcmCameraBaslerInformation(object):
    __slots__ = ["serial_number", "user_defined_name", "calibrating_params"]

    def __init__(self):
        self.serial_number = ""
        self.user_defined_name = ""
        self.calibrating_params = ZcmCameraCalibratingParams()

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmCameraBaslerInformation._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __serial_number_encoded = self.serial_number.encode('utf-8')
        buf.write(struct.pack('>I', len(__serial_number_encoded)+1))
        buf.write(__serial_number_encoded)
        buf.write(b"\0")
        __user_defined_name_encoded = self.user_defined_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__user_defined_name_encoded)+1))
        buf.write(__user_defined_name_encoded)
        buf.write(b"\0")
        assert self.calibrating_params._get_packed_fingerprint() == ZcmCameraCalibratingParams._get_packed_fingerprint()
        self.calibrating_params._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmCameraBaslerInformation._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmCameraBaslerInformation._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmCameraBaslerInformation()
        __serial_number_len = struct.unpack('>I', buf.read(4))[0]
        self.serial_number = buf.read(__serial_number_len)[:-1].decode('utf-8', 'replace')
        __user_defined_name_len = struct.unpack('>I', buf.read(4))[0]
        self.user_defined_name = buf.read(__user_defined_name_len)[:-1].decode('utf-8', 'replace')
        self.calibrating_params = ZcmCameraCalibratingParams._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmCameraBaslerInformation in parents: return 0
        newparents = parents + [ZcmCameraBaslerInformation]
        tmphash = (0x665c65ab7d017db6+ ZcmCameraCalibratingParams._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmCameraBaslerInformation._packed_fingerprint is None:
            ZcmCameraBaslerInformation._packed_fingerprint = struct.pack(">Q", ZcmCameraBaslerInformation._get_hash_recursive([]))
        return ZcmCameraBaslerInformation._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

